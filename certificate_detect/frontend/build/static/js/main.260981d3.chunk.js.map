{"version":3,"sources":["serviceWorker.js","components/alerts/Alerts.js","components/header/Search.js","actions/clusters.js","actions/types.js","components/panel/LeftPanelBody.js","actions/auth/login.js","components/display/Tiles.js","components/panel/ClusterPanelBody.js","actions/walls.js","components/display/Slide.js","components/Workspace.js","components/Home.js","components/ServiceList.js","reducers/clusters.js","reducers/auth/login.js","reducers/walls.js","reducers/index.js","store.js","components/Parser/MainParser.js","components/auth/UserMenu.js","components/auth/UserPage.js","App.js","index.js","static/background.jpg"],"names":["Boolean","window","location","hostname","match","Alerts","cancel","props","toggleAlerts","className","this","message","onClick","Component","Search","state","selected_filter","alert","alert_message","keys","downloadUserList","console","log","onFilterChange","e","setState","target","id","length","renderFilterMenu","filter_menu_state","selected","background","color","style","renderKeys","map","key","removeKeyword","indexOf","splice","onInputChange","text","value","substring","onInputSubmit","keyCode","search","item","onKeyUp","onSubmit","onChange","title","toggleFilterMenu","url","getClusters","user_id","group_id","dispatch","$","ajax","type","dataType","done","data","payload","response","LeftPanelBody","groups","selected_group","refreshGroup","getGroupStatus","selectGroup","renderGroups","Object","group","width","parseInt","status","name","nextProps","current_clusters","setGroupData","toggleLeftPanel","defaultValue","mapDispatchToProps","connect","clusters","group_status","setCode","URLSearchParams","get","checkToken","Array","prototype","unique","a","concat","i","j","Tiles","elements_on_page","page_number","number_of_clusters","selected_clusters","opened_cluster","current_page","code","selectCluster","cluster","getCtrl","cluster_id","includes","push","openCluster","renderData","current_group_data","cluster_panel_state","highlight_style","visibility","tile_style","boxShadow","quant","certificates","thumbnail","image_url","class","fontSize","backgroundImage","selectAll","check_selected_all","all","login","ClusterPanelBody","selected_items","items","current_item","selectItem","openImage","selectAllItems","nextItem","prevItem","renderItems","selected_style","check_selected","closeCluster","slide_state","getUser","token","Slide","text_data","text_blocks","selected_block","h","w","renderTextData","undefined","block","font_size","y","onTextAreaChange","selectBlock","height","foundIndex","findIndex","new_data","transformTextBlocks","Number","x","Math","abs","new_text_blocks","temp","new_text","line","new_block","saveTextBlocks","filter","updateCertificateBlocks","on","resize","access_token","closeImage","user","rel","href","src","photo_200","first_name","last_name","post_id","blocks","walls","Workspace","left_panel_state","ctrl","current_cluster","current_slide_item","ctrlDown","ctrlUp","getClusterPanelState","closePanels","document","getElementById","handleKeys","handleEventType","onKeyEvent","display_data","Home","Background","handleLogin","client_id","display","redirect_uri","response_type","scope","v","searchParams","require","stringify","replace","ServiceList","setToken","prevProps","getAccountInfo","to","url_new","URL","urlParams","expires_in","account_info","initialState","update_block_status","search_result","error","hehe","combineReducers","action","middleware","thunk","store","createStore","rootReducer","composeWithDevTools","applyMiddleware","MainParser","post_link","posts","show_all_posts","handleParse","submitPostByLink","split","getWall","renderPosts","reverse","post","owner","owner_data","content","post_data","post_custom_id","from_id","link","photo","photo_50","views_count","views","count","text_style","show_check","overflow","showAll","renderAttachments","attachments","likes","reposts","comments","doc","sizes","new_post","placeholder","data_post","owner_id","data_owner","UserMenu","user_settings_visibility","handleClickOutside","evt","closeUserSettings","toggleUserSettings","getToken","onClickOutside","UserPage","renderHead","renderContent","App","exact","path","component","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","module","exports"],"mappings":"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","file":"static/js/main.260981d3.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react'\n\nexport class Alerts extends Component {\n\n\n    cancel = () => {\n        this.props.toggleAlerts()\n    }\n\n    render() {\n        return (\n            <div className=\"alert-message\">\n                <p>{this.props.message}</p>\n                <button>Подтвердить</button>\n                <button onClick={this.cancel}>Отмена</button>\n            </div>\n        )\n    }\n}\n\nexport default Alerts\n","import React, { Component, Fragment } from 'react'\nimport Alerts from '../alerts/Alerts'\nimport PropTypes from 'prop-types';\n\n\nexport class Search extends Component {\n\n    state = {\n        selected_filter: null,\n        alert: false,\n        alert_message: \"\",\n\n        keys: []\n    }\n\n    static propTypes = {\n        filter_menu_state: PropTypes.bool.isRequired,\n        toggleFilterMenu: PropTypes.func.isRequired\n    }\n\n    downloadUserList = () => {\n        console.log(\"TODO : download user list\")\n    }\n\n    onFilterChange = (e) => {\n        this.setState({ selected_filter: e.target.id })\n    }\n\n    toggleAlerts = (message) => {\n        if (message.length == 0) {\n            this.setState({ alert: !this.state.alert, alert_message: message })\n        }\n    }\n\n    renderFilterMenu = () => {\n        if (this.props.filter_menu_state) {\n\n            const selected = {\n                background: \"white\",\n                color: \"#38455b\"\n            }\n\n            return (\n                <Fragment>\n                    <div className=\"filter-menu\">\n                        <p>Доступные фильтры:</p>\n                        <div>\n                            <button onClick={this.onFilterChange} id=\"1\" style={this.state.selected_filter == '1' ? selected : null}>Фильтр 1</button>\n                            <button onClick={this.onFilterChange} id=\"2\" style={this.state.selected_filter == '2' ? selected : null}>Фильтр 2</button>\n                            <button onClick={this.onFilterChange} id=\"3\" style={this.state.selected_filter == '3' ? selected : null}>Фильтр 3</button>\n                            <button onClick={this.onFilterChange} id=\"4\" style={this.state.selected_filter == '4' ? selected : null}>Фильтр 4</button>\n                            <button onClick={this.onFilterChange} id=\"5\" style={this.state.selected_filter == '5' ? selected : null}>Фильтр 5</button>\n                        </div>\n                    </div>\n                </Fragment>\n            )\n        }\n        return null\n    }\n\n    renderKeys = () => {\n        return this.state.keys.map(key => {\n            return (\n                <Fragment>\n                    <p>{key}<i className=\"fas fa-times\" onClick={() => { this.removeKeyword(key) }}></i></p>\n                </Fragment>\n            )\n        })\n    }\n\n    removeKeyword = (key) => {\n        var keys = this.state.keys\n        const id = keys.indexOf(key);\n        if (id > -1) {\n            keys.splice(id, 1);\n        }\n        this.setState({ keys: keys })\n    }\n\n    onInputChange = (e) => {\n        var text = e.target.value\n        if (text === ' ') {\n            e.target.value = ''\n        }\n        else if (text[text.length - 1] === ' ') {\n            e.target.value = ''\n            this.setState({ keys: [...this.state.keys, text.substring(0, text.length - 1)] })\n        }\n    }\n\n    onInputSubmit = (e) => {\n        if (e.keyCode === 13) {\n            const search = this.state.keys.map(item => { return item + ' ' })\n            alert('Будет поиск по словам: ' + search)\n        }\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"header\">\n                    <div className=\"search\">\n                        <p><i className=\"fas fa-search\"></i></p>\n                        <div className=\"keywords\">\n                            {this.renderKeys()}\n                        </div>\n                        <input onKeyUp={this.onInputSubmit} onSubmit={this.onInputChange} onChange={this.onInputChange}></input>\n                    </div>\n                    <button title=\"Скачать пользователей\" id=\"download-users\" onClick={this.downloadUserList}>\n                        <p><i className=\"fas fa-file-download\"></i></p>\n                        <div className=\"highlight\"></div>\n                    </button>\n                    <button title=\"Список фильтров\" id=\"filters\" onClick={this.props.toggleFilterMenu}>\n                        <p><i className=\"fas fa-clipboard-list\"></i></p>\n                        <div className=\"highlight\"></div>\n                    </button>\n                </div>\n\n                {this.renderFilterMenu()}\n                {this.state.alert ? <Alerts toggleAlerts={this.toggleAlerts}></Alerts> : null}\n            </Fragment>\n        )\n    }\n}\n\nexport default Search\n","import axios from 'axios';\nimport { GET_CLUSTERS, GET_GROUP_STATUS, UPDATE_CERTIFICATE_BLOCKS, SEARCH } from './types';\nimport $, { data } from \"jquery\"\n\nconst url = \"http://80.89.204.142:14289/api/\"\n\n\n// Метод: GET api/get_all_clusters\n// Данные: \n// Результат: {'response': [{'certificates': [{'id': 1, 'image_url': 'https://sun9-62.userapi.com/MY7roA6iWI_Ykietz4EHQQP8-1eSgWgkDrINnA/5dwO5T2hgP8.jpg', 'post_id': 5066, 'text_blocks': [{'h': 0.023076923076923078, 'text': 'СЕРТИФИКАТ', 'w': 0.205607476635514, 'x': 0.19781931464174454, 'y': 0.15538461538461537}, {'h': 0.026153846153846153, 'text': 'СПЕЦИАЛИСТА', 'w': 0.2803738317757009, 'x': 0.40654205607476634, 'y': 0.15538461538461537}], 'user_id': 95976927}, {'id': 2, 'image_url': 'https://sun9-20.userapi.com/pXC9FsKje43QNSLutJv-BQkHlBDaeKCAF0jprQ/14ceOpnFxis.jpg', 'post_id': 5066, 'text_blocks': [{'h': 0.024147727272727272, 'text': 'СЕРТИФИКАТ', 'w': 0.22655122655122656, 'x': 0.1976911976911977, 'y': 0.1534090909090909}, {'h': 0.028409090909090908, 'text': 'СПЕЦИАЛИСТА', 'w': 0.25685425685425683, 'x': 0.43434343434343436, 'y': 0.1534090909090909}], 'user_id': 95976927}], 'cluster_id': 1, 'cluster_name': 'кластер #1'}, {'certificates': [{'id': 3, 'image_url': 'https://sun9-65.userapi.com/c856136/v856136174/1947d4/GgdR0yPEAeU.jpg', 'post_id': 5049, 'text_blocks': [{'h': 0.03329506314580941, 'text': 'Максим', 'w': 0.20416666666666666, 'x': 0.23055555555555557, 'y': 0.39724454649827784}, {'h': 0.04247990815154994, 'text': 'Бушмелев', 'w': 0.2361111111111111, 'x': 0.45555555555555555, 'y': 0.39724454649827784}], 'user_id': 95976927}], 'cluster_id': 2, 'cluster_name': 'кластер #2'}]}\nexport const getClusters = (user_id, group_id) => dispatch => {\n    $.ajax({\n        url: url + `get_all_clusters`,\n        type: 'GET',\n        dataType: 'jsonp',\n    }).done(function (data) {\n        dispatch({\n            type: GET_CLUSTERS,\n            payload: data.response\n        });\n    })\n}\n\n// Метод: GET api/get_status\n// Данные: \n// Результат: {'response': [{'id': 1, 'name': 'session_server_test_01', 'status': '20.0%'}, {'id': 2, 'name': 'session_server_test_01', 'status': '50.0%'}, {'id': 3, 'name': 'анализ группы 1', 'status': 'in_queue'}]}\nexport const getGroupStatus = () => dispatch => {\n    $.ajax({\n        url: url + `get_status`,\n        type: 'GET',\n        dataType: 'jsonp',\n    }).done(function (data) {\n        dispatch({\n            type: GET_GROUP_STATUS,\n            payload: data.response\n        });\n    })\n}\n\n// Метод: POST api/update_cetrificate_blocks\n// Данные: {'certificate_id': 1, 'text_blocks': [{'h': 0.023076923076923078, 'text': 'СЕРТИФИКАТ', 'w': 0.205607476635514, 'x': 0.19781931464174454, 'y': 0.15538461538461537}, {'h': 0.026153846153846153, 'text': 'СПЕЦИАЛИСТА', 'w': 0.2803738317757009, 'x': 0.40654205607476634, 'y': 0.15538461538461537}]}\n// Результат: {\"response\":\"success\"}\nexport const updateCertificateBlocks = (id, blocks) => dispatch => {\n    const data = { 'certificate_id': id, 'text_blocks': blocks }\n    $.ajax({\n        url: url + `update_cetrificate_blocks`,\n        type: \"GET\",\n        data: data,\n        dataType: 'jsonp',\n    }).done(function (data) {\n        dispatch({\n            type: UPDATE_CERTIFICATE_BLOCKS,\n            payload: data.response\n        });\n    })\n}\n\n\n// Метод: POST api/search\n// Данные: {'fuilds': {'text': 'Иван Иванов'}}\n// Результат: [метод на доработке]\nexport const search = (text) => dispatch => {\n    const data = { 'fields': { 'text': text } }\n    $.ajax({\n        url: url + `search`,\n        type: \"POST\",\n        data: data,\n        dataType: 'jsonp',\n        success: function (data) {\n            dispatch({\n                type: SEARCH,\n                payload: data.response\n            });\n        },\n    });\n}\n\n\n","export const GET_CLUSTERS = \"GET_CLUSTERS\"\n\nexport const LOGIN_REQUEST = 'LOGIN_REQUEST'\nexport const LOGIN_SUCCESS = 'LOGIN_SUCCESS'\nexport const LOGIN_FAIL = 'LOGIN_FAIL'\n\nexport const SET_CODE = 'SET_CODE'\nexport const GET_TOKEN = 'GET_TOKEN'\nexport const CHECK_TOKEN = 'CHECK_TOKEN'\nexport const SET_TOKEN = 'SET_TOKEN'\n\nexport const GET_WALL = 'GET_WALL'\nexport const GET_USER = 'GET_USER'\nexport const GET_ORIGIN_USER = 'GET_ORIGIN_USER'\n\nexport const GET_ACCOUNT_INFO = 'GET_ACCOUNT_INFO'\n\nexport const GET_GROUP_STATUS = 'GET_GROUP_STATUS'\n\nexport const UPDATE_CERTIFICATE_BLOCKS = 'UPDATE_CERTIFICATE_BLOCKS'\n\nexport const SEARCH = 'SEARCH'\n\n\n","import React, { Component, Fragment } from 'react'\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getClusters, getGroupStatus } from '../../actions/clusters';\n\nexport class LeftPanelBody extends Component {\n\n\n    state = {\n        groups: [], //temporary\n        selected_group: null\n    }\n\n    static propTypes = {\n        getCluster: PropTypes.func.isRequired,\n        getGroupStatus: PropTypes.func.isRequired,\n        current_clusters: PropTypes.array.isRequired,\n        groups: PropTypes.object.isRequired\n    }\n\n\n    componentDidMount() {\n        this.props.getGroupStatus()\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.current_clusters != nextProps.current_clusters) {\n            this.props.setGroupData(nextProps.current_clusters)\n        }\n    }\n\n    refreshGroup = (id) => {\n        this.props.getGroupStatus()\n    }\n\n    selectGroup = (id) => {\n        // this.props.getClusters(id, id)\n        // this.setState({ selected_group: id })\n    }\n\n    renderGroups = () => {\n        // const self = this\n        // const groups = this.state.groups\n\n        const groups = this.props.groups\n\n        return Object.keys(groups).map(id => {\n            const group = groups[id]\n\n            const progress = parseInt(group.status.substring(0, group.status.length - 1)) / 100\n            const style = {\n                width: (progress * 224) + \"px\"\n            }\n            return (\n                <Fragment>\n                    <div className=\"group-line\">\n                        <button className=\"group-name\" title={group.name} onClick={() => this.selectGroup(group.id)}>{group.name}</button>\n                        <div className=\"progress\">\n                            <div className=\"bar\" style={style}></div>\n                        </div>\n                        <button onClick={() => this.refreshGroup(group.id)}><i className=\"fas fa-sync-alt\"></i></button>\n                    </div>\n                </Fragment >\n            )\n        })\n\n        // return groups.map(item => {\n        //     const style = {\n        //         width: (item.progress * 224) + \"px\"\n        //     }\n        //     const highlight_style = item.id == this.state.selected_group ? {\n        //         visibility: \"visible\"\n        //     } : null\n\n\n\n        //     return (\n        //         <Fragment>\n        //             <div className=\"group-line\">\n        //                 <p onClick={() => this.selectGroup(item.id)}>{item.name}</p>\n        //                 <div className=\"group-highlight\" style={highlight_style}><i class=\"fas fa-eye\"></i></div>\n        //                 <div className=\"progress\">\n        //                     <div className=\"bar\" style={style}></div>\n        //                 </div>\n        //                 <button onClick={() => self.refreshGroup(item.id)}><i className=\"fas fa-sync-alt\"></i></button>\n        //             </div>\n        //         </Fragment >\n        //     )\n        // })\n\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"left-panel\">\n                    <div className=\"panel-body\">\n                        <button id=\"close\" onClick={this.props.toggleLeftPanel}><i className=\"fas fa-times\"></i></button>\n                        <p className=\"title\">Панель управления</p>\n\n                        <div className=\"groups\">\n                            <p className=\"block-title\">Текущие группы</p>\n                            {this.renderGroups()}\n                        </div>\n                        <div className=\"new-request\">\n                            <p className=\"block-title\">Новый анализ</p>\n                            <label>Название группы:</label>\n                            <input></input>\n                            <label>Тип данных:</label>\n                            <select defaultValue=\"1\">\n                                <option value=\"1\" key=\"1\">Изображение</option>\n                                <option value=\"2\" key=\"2\">Текст</option>\n                            </select>\n                            <label className=\"data\">Данные:</label>\n                            <textarea>\n                            </textarea>\n                            <button className=\"submit\">Отправить</button>\n                        </div>\n                    </div>\n                </div>\n            </Fragment>\n\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    getGroupStatus\n};\n\nconst mapStateToProps = state => ({\n    groups: state.clusters.group_status,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LeftPanelBody);\n","import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAIL, SET_CODE, GET_TOKEN, CHECK_TOKEN, SET_TOKEN, GET_ACCOUNT_INFO } from \"../types\"\nimport $, { data } from \"jquery\"\n\n\nimport axios from 'axios';\nimport fetch from 'node-fetch';\n\n\nexport function handleLogin() {\n    return function (dispatch) {\n        const querystring = require('querystring');\n\n        var client_id = 7560681\n        var display = 'page'\n        // var redirect_uri = \"http://localhost:3000/service-list\"\n        var redirect_uri = \"http://cluster-management.herokuapp.com/service-list\"\n\n\n        var response_type = 'token'\n        var scope = 'friends'\n        var v = '5.122'\n\n        const data = {\n            client_id,\n            display,\n            redirect_uri,\n            response_type,\n            scope,\n            v,\n        };\n        const searchParams = \"https://oauth.vk.com/authorize?\" + querystring.stringify(data);\n\n        window.location.replace(searchParams);\n\n    }\n}\n\nexport const setCode = () => dispatch => {\n\n    const url = window.location.search;\n    const urlParams = new URLSearchParams(url);\n\n    dispatch({\n        type: SET_CODE,\n        payload: urlParams.get('code')\n    })\n}\n\nexport const setToken = () => dispatch => {\n    var url = window.location.href;\n    url = url.replace('#', '?')\n    var url_new = new URL(url);\n\n    const urlParams = new URLSearchParams(url_new.search);\n\n    const access_token = urlParams.get('access_token')\n    const expires_in = urlParams.get('expires_in')\n    const user_id = urlParams.get('user_id')\n\n    const data = { access_token, expires_in, user_id }\n\n\n    dispatch({\n        type: SET_TOKEN,\n        payload: data\n    })\n}\n\nexport const checkToken = () => dispatch => {\n    dispatch({\n        type: CHECK_TOKEN,\n        payload: null\n    })\n}\n\nexport const getToken = () => dispatch => {\n    dispatch({\n        type: GET_TOKEN,\n        payload: null\n    })\n}\n\nexport const getAccountInfo = (token) => dispatch => {\n\n    $.ajax({\n        url: 'https://api.vk.com/method/users.get?user_ids=' + token.user_id + '&fields=photo_200' + '&access_token=' + token.access_token + \"&v=5.122\",\n        type: 'GET',\n        dataType: 'jsonp',\n    }).done(function (data) {\n        dispatch({\n            type: GET_ACCOUNT_INFO,\n            payload: data.response[0]\n        })\n    })\n}\n\n// export const getToken = code => (dispatch) => {\n//     const url = window.location.search;\n//     const urlParams = new URLSearchParams(url);\n\n\n//     var client_id = 7560681\n//     var client_secret = 'embnwcBl4aN3g5xMNN5c'\n//     var redirect_uri = 'http://localhost:3000/service-list'\n//     var code = urlParams.get('code')\n\n//     const r =\n//         \"client_id=\" + client_id +\n//         \"&client_secret=\" + client_secret +\n//         \"&redirect_uri=\" + redirect_uri +\n//         \"&code=\" + code\n//     const searchParams = \"https://oauth.vk.com/access_token?\" + r;\n//     console.log(searchParams)\n//     // var xmlHttp = new XMLHttpRequest();\n//     // xmlHttp.open(\"GET\", \"https://oauth.vk.com/access_token\", false); // false for synchronous request\n//     // xmlHttp.send(null);\n//     // console.log(xmlHttp.responseText)\n//     axios({\n//         url: searchParams,\n//         method: 'GET',\n//     }).then(res => {\n//         console.log(res)\n//     }).catch(err => console.log(err));\n\n//     // window.location.replace(searchParams);\n\n// }","import React, { Component, Fragment } from 'react'\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport { getClusters } from '../../actions/clusters';\nimport { setCode } from '../../actions/auth/login';\n\n\n\n\nArray.prototype.unique = function () {\n    var a = this.concat();\n    for (var i = 0; i < a.length; ++i) {\n        for (var j = i + 1; j < a.length; ++j) {\n            if (a[i] === a[j])\n                a.splice(j--, 1);\n        }\n    }\n\n    return a;\n};\n\nexport class Tiles extends Component {\n\n\n    state = {\n        elements_on_page: 14,\n        page_number: 1,\n        number_of_clusters: null,\n        selected_clusters: [],\n        opened_cluster: null,\n        current_page: [],\n\n\n        code: null\n        // ctrl: false\n    }\n\n    static propTypes = {\n        data: PropTypes.array.isRequired,\n        code: PropTypes.string.isRequired,\n        getClusters: PropTypes.func.isRequired,\n        getLoginStatus: PropTypes.func.isRequired,\n        setCode: PropTypes.func.isRequired\n    }\n\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    componentDidMount() {\n        this.props.getClusters()\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.current_group_data != nextProps.current_group_data) {\n            this.setState({ number_of_clusters: nextProps.current_group_data.length })\n        }\n    }\n\n    selectCluster = (cluster) => {\n        if (this.props.getCtrl()) {\n            const id = parseInt(cluster.cluster_id)\n            var selected_clusters = this.state.selected_clusters\n            if (selected_clusters.includes(id)) {\n                const i = selected_clusters.indexOf(id);\n                if (i > -1) {\n                    selected_clusters.splice(i, 1);\n                }\n            }\n            else {\n                selected_clusters.push(id)\n            }\n            this.setState({ selected_clusters: selected_clusters })\n        }\n        else {\n            this.props.openCluster(cluster)\n            this.setState({ opened_cluster: cluster.cluster_id })\n        }\n    }\n\n    renderData = () => {\n        if (this.props.current_group_data.length) {\n            const output = this.props.current_group_data\n            return output.map(item => {\n                const selected = this.state.selected_clusters.includes(item.cluster_id) ? true : false\n\n                const selected_cluster_check = this.props.cluster_panel_state ? this.props.opened_cluster : null\n                const opened_cluster = selected_cluster_check == item.cluster_id ? true : false\n\n                const highlight_style = selected ? {} : { visibility: \"hidden\" }\n                const tile_style = selected ? { boxShadow: \"none\" } : {}\n\n                const quant = item.certificates.length\n                const thumbnail = item.certificates[0].image_url\n                return (\n                    <div key={item.cluster_id} className=\"tile\" style={tile_style} onClick={() => this.selectCluster(item)} >\n                        <div className=\"counter\">\n                            {opened_cluster ? <i class=\"far fa-eye\" style={{ fontSize: \"11pt\" }}></i> :\n                                selected ? <i class=\"fas fa-check\" style={{ fontSize: \"8pt\" }}></i> : quant}\n                        </div>\n                        <div className=\"meta-data\">Набор #{item.cluster_id}</div>\n                        <div className=\"thumbnail\" style={{ backgroundImage: 'url(\"' + thumbnail + '\")' }} ></div>\n                        <div className=\"selected\" style={highlight_style}>\n                        </div>\n                    </ div>\n                )\n            })\n        }\n        return null\n    }\n\n    // selectPage = () => {\n    //     const result = this.getCurrentPage().map(item => { return item.cluster_id })\n\n    //     var selected_clusters = this.state.selected_clusters\n\n    //     const new_data = selected_clusters.concat(result).unique();\n\n    //     if (new_data.length == selected_clusters.length) {\n    //         result.forEach(element => {\n    //             if (selected_clusters.includes(element)) {\n    //                 const i = selected_clusters.indexOf(element);\n    //                 if (i > -1) {\n    //                     selected_clusters.splice(i, 1);\n    //                 }\n    //             }\n    //         });\n    //         this.setState({ selected_clusters: selected_clusters, current_page: result })\n    //     }\n    //     else {\n    //         this.setState({ selected_clusters: new_data, current_page: result })\n    //     }\n    // }\n\n    // getCurrentPage = () => {\n    //     if (this.props.current_group_data.length) {\n    //         const data = this.props.current_group_data\n\n    //         const page_number = parseInt(this.state.page_number)\n    //         const elements_on_page = parseInt(this.state.elements_on_page)\n    //         const start = (page_number - 1) * elements_on_page\n    //         const end = start + elements_on_page\n\n    //         return data.slice(start, end)\n    //     }\n    //     return []\n    // }\n\n    selectAll = () => {\n        if (this.state.selected_clusters.length != this.props.current_group_data.length) {\n            this.setState({ selected_clusters: this.props.current_group_data.map(item => { return (item.cluster_id) }) })\n        }\n        else {\n            this.setState({ selected_clusters: [] })\n        }\n    }\n\n    render() {\n        if (this.props.current_group_data.length) {\n            const check_selected_all = this.props.current_group_data.length == this.state.selected_clusters.length ? true : false\n            return (\n                <Fragment>\n                    <div className=\"tiles-workspace\">\n                        <div className=\"tiles\">\n                            {this.renderData()}\n                        </div>\n                        <button\n                            id=\"select-all-clusters\"\n                            onClick={this.selectAll}>\n                            {check_selected_all ?\n                                <span><i className=\"far fa-check-circle\"></i></span> :\n                                <span><i className=\"far fa-circle\"></i></span>\n                            } Выделить все\n                            </button>\n                    </div>\n                </Fragment>\n            )\n        }\n        return null\n    }\n}\n\n\n\nconst mapDispatchToProps = {\n    getClusters,\n    setCode\n};\n\nconst mapStateToProps = state => ({\n    data: state.clusters.all,\n    code: state.login.code\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Tiles);\n","import React, { Component, Fragment } from 'react'\n\nexport class ClusterPanelBody extends Component {\n\n\n    state = {\n        selected_items: [],\n        items: [],\n        cluster: {},\n\n        current_item: {}\n    }\n\n    componentDidMount() {\n        this.setState({ cluster: this.props.cluster, items: this.props.cluster.certificates })\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.cluster != nextProps.cluster) {\n            this.setState({ cluster: nextProps.cluster, items: nextProps.cluster.certificates })\n        }\n    }\n\n    selectItem = (item) => {\n        if (this.props.getCtrl()) {\n            const id = parseInt(item.id)\n            var selected_items = this.state.selected_items\n            if (selected_items.includes(id)) {\n                const i = selected_items.indexOf(id);\n                if (i > -1) {\n                    selected_items.splice(i, 1);\n                }\n            }\n            else {\n                selected_items.push(id)\n            }\n            this.setState({ selected_items: selected_items })\n        }\n        else {\n            this.props.openImage(item)\n            this.setState({ current_item: item })\n        }\n    }\n\n    selectAllItems = () => {\n        if (this.state.selected_items.length == this.state.items.length) {\n            this.setState({ selected_items: [] })\n        }\n        else this.setState({ selected_items: this.state.items.map(item => { return item.id }) })\n    }\n\n    nextItem = () => {\n        const current_item = this.state.current_item\n        const items = this.state.items\n        const id = items.indexOf(current_item)\n        if (id + 1 === items.length) {\n            this.props.openImage(items[0])\n            this.setState({ current_item: items[0] })\n        }\n        else {\n            this.props.openImage(items[id + 1])\n            this.setState({ current_item: items[id + 1] })\n        }\n    }\n\n    prevItem = () => {\n        const current_item = this.state.current_item\n        const items = this.state.items\n        const id = items.indexOf(current_item)\n        if (id - 1 < 0) {\n            this.props.openImage(items[items.length - 1])\n            this.setState({ current_item: items[items.length - 1] })\n        }\n        else {\n            this.props.openImage(items[id - 1])\n            this.setState({ current_item: items[id - 1] })\n        }\n    }\n\n    renderItems = () => {\n        const data = this.state.items\n        return data.map(item => {\n            const selected_style = this.state.selected_items.includes(item.id) ? {} : { visibility: \"hidden\" }\n            return (\n                <Fragment>\n                    <div className=\"item\" onClick={() => this.selectItem(item)}>\n                        <div className=\"thumbnail\" style={{ backgroundImage: 'url(\"' + item.image_url + '\")' }} ></div>\n                        <div className=\"item-highlight\" style={selected_style}>\n                            <p><i class=\"fas fa-check\"></i></p>\n                        </div>\n                    </div>\n                </Fragment>\n            )\n        })\n    }\n\n\n    render() {\n\n\n        const check_selected = this.state.selected_items.length == this.state.items.length ? true : false\n\n        return (\n            <Fragment>\n                <div className=\"right-panel\">\n                    <div className=\"panel-body\">\n                        <button id=\"close\" onClick={this.props.closeCluster}><i className=\"fas fa-times\"></i></button>\n                        <p className=\"title\">Набор №{this.state.cluster.cluster_id}</p>\n                        <button\n                            class=\"select-all-items\"\n                            onClick={this.selectAllItems}>\n                            {check_selected ?\n                                <span><i className=\"far fa-check-circle\"></i></span> :\n                                <span><i className=\"far fa-circle\"></i></span>\n                            } Выделить все\n                        </button>\n                        <div className=\"clusters\">\n                            <p className=\"block-title\">Объектов выбрано: {this.state.selected_items.length}</p>\n                            <div className=\"items\">\n                                {this.renderItems()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                {this.props.slide_state ?\n                    <Fragment>\n                        <button onClick={this.nextItem} className=\"item-nav\" id=\"right\"><i className=\"fas fa-arrow-right\"></i></button>\n                        <button onClick={this.prevItem} className=\"item-nav\" id=\"left\"><i className=\"fas fa-arrow-left\"></i></button>\n                    </Fragment> : null}\n\n            </Fragment>\n        )\n    }\n}\n\nexport default ClusterPanelBody;\n","import { GET_WALL, GET_USER } from \"./types\"\nimport axios from 'axios';\nimport { $CombinedState } from \"redux\";\nimport $, { data } from \"jquery\"\n\n\nexport const getWall = (token, id, user) => dispatch => {\n    $.ajax({\n        url: 'https://api.vk.com/method/wall.getById?posts=' + id + '&access_token=' + token + \"&v=5.122\",\n        type: 'GET',\n        dataType: 'jsonp',\n    }).done(function (data_post) {\n        const owner_id = data_post.response[0].owner_id\n\n        if (user) {\n            $.ajax({\n                url: 'https://api.vk.com/method/users.get?user_ids=' + owner_id + '&fields=photo_50' + '&access_token=' + token + \"&v=5.122\",\n                type: 'GET',\n                dataType: 'jsonp',\n            }).done(function (data_owner) {\n                dispatch({\n                    type: GET_WALL,\n                    payload: { post_data: data_post, owner_data: data_owner }\n                });\n            })\n        }\n        else {\n            $.ajax({\n                url: 'https://api.vk.com/method/groups.getById?group_id=' + owner_id * (-1) + '&access_token=' + token + \"&v=5.122\",\n                type: 'GET',\n                dataType: 'jsonp',\n            }).done(function (data_owner) {\n                dispatch({\n                    type: GET_WALL,\n                    payload: { post_data: data_post, owner_data: data_owner }\n                });\n            })\n        }\n\n    })\n\n    // axios({\n    //     method: 'POST',\n    //     url: \"https://api.vk.com/method/users.get?user_ids=210700286&fields=bdate&v=5.130\",\n    //     headers: {\n    //         // Authorization: token,\n    //         \"Content-Type\": \"application/jsonp\"\n    //     },\n    // }).then((res) => {\n    //     // YOUR CODE HERE\n    // }).catch((err) => {\n    //     console.log(err);\n    // });\n\n    // var script = document.createElement('SCRIPT');\n    // script.src = \"https://api.vk.com/method/wall.getById?posts=\" + id + \"&access_token=\" + token + \"&v=5.122\";\n    // document.getElementsByTagName(\"head\")[0].appendChild(script);\n    // function callbackFunc(result) {\n    //     alert(result.response)\n    // }\n\n    // axios.get(`https://api.vk.com/method/wall.getById`, {\n    //     params: {\n    //         posts: id,\n    //         access_token: token,\n    //         v: 5.122\n    //     }\n    // }).then(res => {\n    //     dispatch({\n    //         type: GET_WALL,\n    //         payload: res.data\n    //     });\n    // }).catch(err => console.log(err));\n}\n\nexport const getUser = (token, id) => dispatch => {\n    $.ajax({\n        url: 'https://api.vk.com/method/users.get?user_ids=' + id + '&fields=photo_200' + '&access_token=' + token + \"&v=5.122\",\n        type: 'GET',\n        dataType: 'jsonp',\n    }).done(function (data) {\n        dispatch({\n            type: GET_USER,\n            payload: data\n        });\n    })\n}\n","import React, { Component, Fragment } from 'react'\nimport $, { data } from \"jquery\"\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { getUser } from '../../actions/walls'\nimport { updateCertificateBlocks } from '../../actions/clusters'\n\n\n\n\nexport class Slide extends Component {\n\n    state = {\n        url: \"\",\n        text_data: [],\n        text_blocks: [],\n\n        selected_block: { id: null, h: null, w: null }\n    }\n\n\n    componentDidMount() {\n        $('.slide-image').on(\"load\", function () {\n            $('.text-data').width($('.slide-image').width())\n            $('.text-data').height($('.slide-image').height())\n        })\n        $(window).resize(function () {\n            $('.text-data').width($('.slide-image').width())\n            $('.text-data').height($('.slide-image').height())\n        });\n        this.props.getUser(this.props.token.access_token, this.props.item.user_id)\n        this.setState({ text_blocks: this.transformTextBlocks(this.props.item.text_blocks) })\n    }\n\n    // componentDidUpdate(prevProps) {\n    //     if (this.props.item != prevProps.item) {\n    //         this.props.getUser(this.props.token.access_token, this.props.item.user_id)\n    //         console.log('test')\n    //     }\n    // }\n\n\n\n\n    static propTypes = {\n        item: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getToken: PropTypes.func.isRequired,\n        updateCertificateBlocks: PropTypes.func.isRequired,\n        user: PropTypes.array.isRequired,\n        token: PropTypes.object.isRequired\n    }\n\n\n\n    renderTextData = () => {\n        const data = this.state.text_blocks\n\n        if (data != undefined) {\n\n            return data.map(block => {\n                var font_size = block.h * 40 > 0.7 ? block.h * 40 : 0.7\n                font_size = font_size > 1.2 ? 1.2 : font_size\n\n                const style = {\n                    fontSize: font_size + 'em',\n                }\n                if (this.state.selected_block.id === block.y) {\n                    style['height'] = this.state.selected_block.h\n                    return (<textarea onChange={this.onTextAreaChange} name={block.y} style={style}>{block.text}</textarea>)\n                }\n                return (\n                    <p onClick={(e) => { this.selectBlock(e, block.y) }} style={style} > {block.text}</p >\n                )\n            })\n        }\n\n        return null\n    }\n\n    selectBlock = (e, h) => {\n        this.setState({ selected_block: { id: h, h: $(e.target).height(), w: $(e.target).width() } })\n    }\n\n    onTextAreaChange = (e) => {\n        const name = e.target.name\n        const value = e.target.value\n\n        var text_blocks = this.state.text_blocks\n\n\n\n        var foundIndex = text_blocks.findIndex(item => item.y + '' == name)\n        var new_data = text_blocks[foundIndex]\n        new_data['text'] = value\n        console.log(new_data)\n        text_blocks[foundIndex] = new_data\n\n\n        this.setState({ text_blocks: text_blocks })\n    }\n\n    transformTextBlocks = (data) => {\n        var text_data = {}\n        data.map(item => {\n\n            const height = Number(item.h)\n            const width = Number(item.w)\n            const x = Number(item.x)\n            const y = Number(item.y)\n            const text = item.text\n\n\n            if (Object.keys(text_data).length == 0) {\n                text_data[y] = []\n                text_data[y] = [...text_data[y], { h: height, w: width, x: x, y: y, text: text }]\n            }\n            else {\n                for (var i = 0; i < Object.keys(text_data).length; i++) {\n                    const key = Object.keys(text_data)[i]\n                    if (Math.abs(key - y) < 0.07 && Math.abs(height - text_data[key][0].h) < 0.02) {\n                        text_data[key] = [...text_data[key], { h: height, w: width, x: x, y: y, text: text }]\n                        break\n                    }\n                    if (i == Object.keys(text_data).length - 1) {\n                        text_data[y] = []\n                        text_data[y] = [...text_data[y], { h: height, w: width, x: x, y: y, text: text }]\n                        break\n                    }\n                }\n            }\n        })\n\n        var new_text_blocks = []\n        Object.keys(text_data).map(id => {\n            const temp = text_data[id]\n\n            var new_text = \"\"\n            temp.map(line => {\n                new_text = new_text + line.text + ' '\n            })\n            var new_block = { h: temp[0].h, w: temp[0].w, x: temp[0].x, y: temp[0].y, text: new_text }\n\n            new_text_blocks.push(new_block)\n        })\n\n        return new_text_blocks\n    }\n\n    saveTextBlocks = () => {\n        const data = this.state.text_blocks.filter(item => item.text.length > 0)\n        this.props.updateCertificateBlocks(this.props.item.id, data)\n    }\n\n    render() {\n        return (\n            <Fragment>\n                {Object.keys(this.props.item).length ?\n                    <Fragment>\n                        <div className=\"slide\" onClick={() => this.props.closeImage()}></div>\n                        <div className=\"data\">\n                            <div className=\"container\">\n                                {Object.keys(this.props.user).length ?\n                                    <div className=\"slide-user-info\">\n                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/id\" + this.props.item.user_id}>\n                                            <img className=\"user-photo\" src={this.props.user.response[0].photo_200}></img>\n                                        </a>\n                                        <p>{this.props.user.response[0].first_name} {this.props.user.response[0].last_name}</p>\n                                        <p>ID пользователя: {this.props.item.user_id}</p>\n                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/id\" + this.props.item.user_id}>\n                                            {\"https://vk.com/id\" + this.props.item.user_id}\n                                        </a>\n                                        <p>Пост:</p>\n                                        <a target=\"_blank\" rel=\"noopener noreferrer\" href={\"https://vk.com/wall\" + this.props.item.user_id + \"_\" + this.props.item.post_id}>\n                                            {\"https://vk.com/wall\" + this.props.item.user_id + \"_\" + this.props.item.post_id}\n                                        </a>\n\n                                        {/* <a id=\"post-link\" href={\"https://vk.com/wall\" + this.props.item.user_id + \"_\" + this.props.item.post_id}>\n                                            Оригинал\n                                        </a> */}\n                                    </div>\n                                    : null}\n\n                                <img className=\"slide-image\" src={this.props.item.image_url}></img>\n                            </div>\n                            <div className=\"container\">\n                                <button onClick={this.saveTextBlocks} className=\"save-text-blocks\"><i className=\"far fa-save\"></i>Сохранить изменения</button>\n                                <div className=\"text-data\">\n                                    {this.renderTextData()}\n                                </div>\n                            </div>\n                        </div>\n                        <button id=\"close-slide\" onClick={this.props.closeImage}><i className=\"fas fa-times\"></i></button>\n\n\n                    </Fragment>\n                    : null}\n            </Fragment>\n        )\n    }\n}\n\n\nconst mapDispatchToProps = {\n    getUser,\n    updateCertificateBlocks\n};\n\nconst mapStateToProps = state => ({\n    user: state.walls.user,\n    token: state.login.token\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Slide);","import React, { Component, Fragment } from 'react'\nimport ReactDOM from 'react-dom';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport Search from './header/Search';\nimport Tiles from './display/Tiles';\nimport LeftPanelBody from './panel/LeftPanelBody';\nimport ClusterPanelBody from './panel/ClusterPanelBody';\nimport Slide from './display/Slide';\nimport Background from '../static/background.jpg';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { checkToken } from '../actions/auth/login'\nimport { getClusters } from '../actions/clusters';\n\n\n\nexport class Workspace extends Component {\n    state = {\n        left_panel_state: false,\n        cluster_panel_state: false,\n        filter_menu_state: false,\n        ctrl: false,\n        current_cluster: [],\n        current_slide_item: {},\n        slide_state: false,\n        quant: 0,\n        current_group_data: []\n    }\n\n    static propTypes = {\n        checkToken: PropTypes.func.isRequired,\n        getClusters: PropTypes.func.isRequired,\n        display_data: PropTypes.array.isRequired\n\n    }\n\n    toggleLeftPanel = () => {\n        this.setState({ left_panel_state: !this.state.left_panel_state })\n    }\n\n    toggleFilterMenu = () => {\n        console.log('1')\n        this.setState({ filter_menu_state: !this.state.filter_menu_state })\n    }\n\n    ctrlDown = () => {\n        if (!this.state.ctrl) {\n            this.setState({ ctrl: true })\n        }\n    }\n\n    ctrlUp = () => {\n        if (this.state.ctrl) {\n            this.setState({ ctrl: false })\n        }\n    }\n\n    getCtrl = () => {\n        return this.state.ctrl\n    }\n\n    openCluster = (cluster) => {\n        this.setState({ cluster_panel_state: true, current_cluster: cluster })\n    }\n\n    closeCluster = () => {\n        this.setState({ current_cluster: [], cluster_panel_state: false })\n    }\n\n    getClusterPanelState = () => {\n        return this.state.cluster_panel_state\n    }\n\n    componentDidMount() {\n        const $loading_screen = document.getElementById(\"loading\");\n        $loading_screen.style.visibility = \"hidden\"\n        this.props.checkToken()\n        this.props.getClusters()\n    }\n\n    openImage = (item) => {\n        this.setState({ current_slide_item: item, slide_state: true })\n    }\n\n    closeImage = () => {\n        this.setState({ current_slide_item: {}, slide_state: false })\n    }\n\n    closePanels = () => {\n        this.setState({ left_panel_state: false, cluster_panel_state: false, filter_menu_state: false })\n    }\n\n\n    setGroupData = (data) => {\n        this.setState({ current_group_data: data })\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <KeyboardEventHandler\n                    handleKeys={['ctrl']}\n                    handleEventType={\"keydown\"}\n                    onKeyEvent={(key, e) => this.ctrlDown()}\n                />\n                <KeyboardEventHandler\n                    handleKeys={['ctrl']}\n                    handleEventType={\"keyup\"}\n                    onKeyEvent={(key, e) => this.ctrlUp()}\n                />\n                {!this.state.left_panel_state ?\n                    <button title=\"Панель управления\" id=\"toggle-left-panel\" onClick={this.toggleLeftPanel}>\n                        <p><i className=\"fas fa-chart-pie\"></i></p>\n                        <div className=\"highlight\"></div>\n                    </button>\n                    : null}\n                <Search toggleFilterMenu={this.toggleFilterMenu} filter_menu_state={this.state.filter_menu_state} />\n                {this.state.slide_state ?\n                    <Slide\n                        closeImage={this.closeImage}\n                        item={this.state.current_slide_item}\n                    /> : null}\n                <Tiles\n                    current_group_data={this.props.display_data}\n                    getCtrl={this.getCtrl}\n                    opened_cluster={this.state.current_cluster.cluster_id}\n                    openCluster={this.openCluster}\n                    cluster_panel_state={this.state.cluster_panel_state} />\n                {this.state.left_panel_state ?\n                    <LeftPanelBody\n                        setGroupData={this.setGroupData}\n                        toggleLeftPanel={this.toggleLeftPanel} /> : null}\n                {this.state.cluster_panel_state ?\n                    <ClusterPanelBody\n                        openImage={this.openImage}\n                        getCtrl={this.getCtrl}\n                        closeCluster={this.closeCluster}\n                        quant={this.state.quant}\n                        cluster={this.state.current_cluster}\n                        slide_state={this.state.slide_state} /> : null}\n\n                <div className=\"closePanels\" onClick={this.closePanels}></div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    checkToken,\n    getClusters\n};\n\nconst mapStateToProps = state => ({\n    token: state.login.token,\n    display_data: state.clusters.selected,\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Workspace);\n","import React, { Component, Fragment } from 'react'\nimport Background from '../static/background.jpg';\nimport { Link } from 'react-router-dom';\nimport { handleLogin } from '../actions/auth/login'\n\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nexport class Home extends Component {\n    componentDidMount() {\n        const $loading_screen = document.getElementById(\"loading\");\n        $loading_screen.style.visibility = \"hidden\"\n    }\n\n    static propTypes = {\n        handleLogin: PropTypes.func.isRequired\n    }\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"background\" style={{ backgroundImage: 'url(\"' + Background + '\")' }}></div>\n                <div className=\"content\">\n                    <div className=\"logo\"></div>\n                    <p className=\"head\">Рост трафика / Анализ аудитории</p>\n                    <p className=\"mini-text\">Набор сервисов по автоматизации анализа аудитории <br></br>и персонального менеджмента </p>\n                    {/* <Link to={`/service-list`}><p className=\"link\">Войти</p></Link> */}\n                    <p className=\"link\" onClick={this.props.handleLogin}>Войти</p>\n                </div>\n\n            </Fragment>\n\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    handleLogin\n};\n\nconst mapStateToProps = state => ({\n    user: state.login.name\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import React, { Component, Fragment } from 'react'\nimport Background from '../static/background.jpg';\nimport { Link } from 'react-router-dom';\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { setCode, setToken, getAccountInfo } from '../actions/auth/login';\n\n\n\nexport class ServiceList extends Component {\n\n    componentDidMount() {\n        const $loading_screen = document.getElementById(\"loading\");\n        $loading_screen.style.visibility = \"hidden\"\n        this.props.setToken()\n    }\n\n    static propTypes = {\n        setCode: PropTypes.func.isRequired,\n        setToken: PropTypes.func.isRequired,\n        getAccountInfo: PropTypes.func.isRequired,\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.token != prevProps.token) {\n            this.props.getAccountInfo(this.props.token)\n        }\n    }\n\n\n    render() {\n        return (\n            <Fragment>\n                <div className=\"background\" style={{ backgroundImage: 'url(\"' + Background + '\")' }}></div>\n                <div className=\"content\">\n                    <div className=\"logo\"></div>\n                    <p className=\"service-list-head\">Список сервисов</p>\n                    <div className=\"service-list\">\n                        <Link to={`/workspace`}><p className=\"service-link\">Анализ групп Вконтакте</p></Link>\n                        <Link to={`/parser`}><p className=\"service-link\">Банк креативов</p></Link>\n                    </div>\n                </div>\n\n            </Fragment>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    setCode,\n    setToken,\n    getAccountInfo\n};\n\nconst mapStateToProps = state => ({\n    code: state.login.code,\n    token: state.login.token,\n    account_info: state.login.account_info\n\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ServiceList);\n","import { GET_CLUSTERS, GET_GROUP_STATUS, UPDATE_CERTIFICATE_BLOCKS, SEARCH } from '../actions/types.js'\nconst initialState = {\n    all: [],\n    selected: [],\n    group_status: {},\n\n    update_block_status: {},\n\n    search_result: []\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_CLUSTERS:\n            return {\n                ...state,\n                selected: action.payload\n            };\n\n        case GET_GROUP_STATUS:\n            return {\n                ...state,\n                group_status: action.payload\n            }\n\n        case UPDATE_CERTIFICATE_BLOCKS:\n            return {\n                ...state,\n                update_block_status: action.payload\n            }\n\n        case SEARCH:\n            return {\n                ...state,\n                search_result: action.payload\n            }\n\n        default:\n            return state;\n    }\n}","import { LOGIN_SUCCESS, LOGIN_FAIL, SET_CODE, GET_TOKEN, CHECK_TOKEN, SET_TOKEN, GET_ACCOUNT_INFO } from \"../../actions/types\"\nimport { handleLogin } from '../../actions/auth/login'\n\n\nconst initialState = {\n    name: '',\n    error: '',\n    token: null,\n    account_info: {}\n}\n\nexport default function user(state = initialState, action) {\n\n    switch (action.type) {\n        case LOGIN_SUCCESS:\n            return { ...state, name: action.payload, error: '' }\n\n        case LOGIN_FAIL:\n            return { ...state, error: action.payload.message }\n\n        case SET_CODE:\n            return { ...state, code: action.payload }\n        case GET_TOKEN:\n            return state\n\n        case SET_TOKEN:\n            return { ...state, token: action.payload }\n\n        case GET_ACCOUNT_INFO:\n            return { ...state, account_info: action.payload }\n\n        case CHECK_TOKEN:\n            {\n                if (state.token != null) { return state }\n                else {\n                    hehe()\n                }\n            }\n\n        default:\n            return state\n    }\n\n}\n\n//very temporary\nfunction hehe() {\n    const querystring = require('querystring');\n\n    var client_id = 7560681\n    var display = 'page'\n\n    // var redirect_uri = \"http://localhost:3000/service-list\"\n    var redirect_uri = \"http://cluster-management.herokuapp.com/service-list\"\n\n    var response_type = 'token'\n    var scope = 'friends'\n    var v = '5.122'\n\n    const data = {\n        client_id,\n        display,\n        redirect_uri,\n        response_type,\n        scope,\n        v,\n    };\n    const searchParams = \"https://oauth.vk.com/authorize?\" + querystring.stringify(data);\n\n    window.location.replace(searchParams);\n\n}","import { GET_WALL, GET_USER } from '../actions/types.js'\n\nconst initialState = {\n    selected: {},\n    user: {}\n}\n\nexport default function (state = initialState, action) {\n    switch (action.type) {\n        case GET_WALL:\n            return {\n                ...state,\n                selected: action.payload\n            };\n\n        case GET_USER:\n            return { ...state, user: action.payload }\n\n        default:\n            return state;\n    }\n}","import clusters from './clusters'\nimport login from './auth/login'\nimport walls from './walls'\nimport { combineReducers } from 'redux';\n\nexport default combineReducers({\n    clusters,\n    login,\n    walls\n});","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers'\n\nconst initialState = {};\n\nconst middleware = [thunk];\n\nconst store = createStore(\n    rootReducer,\n    initialState,\n    composeWithDevTools(applyMiddleware(...middleware))\n);\n\nexport default store;","import React, { Component, Fragment } from 'react'\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { getWall } from '../../actions/walls'\nimport { checkToken } from '../../actions/auth/login'\nimport { stringify } from 'qs';\nimport ReactLinkify from 'react-linkify';\nimport { post } from 'jquery';\n\nimport Background from '../../static/background.jpg';\n\n\nexport class MainParser extends Component {\n\n    static propTypes = {\n        getWall: PropTypes.func.isRequired,\n        checkToken: PropTypes.func.isRequired,\n        new_post: PropTypes.object.isRequired\n    }\n\n    state = {\n        post_link: \"\",\n        posts: [],\n\n        show_all_posts: []\n    }\n\n    componentDidMount() {\n        const $loading_screen = document.getElementById(\"loading\");\n        $loading_screen.style.visibility = \"hidden\"\n        this.props.checkToken()\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (this.props.new_post != nextProps.new_post) {\n            const data = nextProps.new_post\n            this.setState({ posts: [...this.state.posts, data] })\n        }\n    }\n\n    handleParse = () => {\n    }\n\n    onChange = (e) => {\n        this.setState({ [e.target.name]: e.target.value })\n    }\n\n    submitPostByLink = () => {\n        document.getElementById('post_input').value = \"\";\n\n        var post_link = this.state.post_link\n        if (post_link.indexOf('-') > 0) {\n            const post_id = post_link.split('-')[1]\n            this.props.getWall(this.props.token.access_token, \"-\" + post_id, false)\n        }\n        else {\n            if (post_link.indexOf('wall') > 0) {\n                // https://m.vk.com/wall7471312_10153?from=feed5_53562639_2823/15\n                var step = post_link.split('wall')[1]\n                const post_id = step.split('?')[0]\n                this.props.getWall(this.props.token.access_token, post_id, true)\n            }\n            else alert('Данная ссылка не ведет на пост')\n        }\n\n    }\n\n    renderPosts = () => {\n        const posts = this.state.posts.reverse()\n        return posts.map(post => {\n            const owner = post.owner_data.response[0]\n            const content = post.post_data.response[0]\n\n            console.log(content)\n\n            const post_custom_id = content.from_id + \"_\" + content.id\n            var link = \"https://vk.com/wall\" + post_custom_id\n            var name = ''\n            var photo = ''\n            if (owner.first_name == undefined) {\n                name = owner.name\n                photo = owner.photo_200\n            }\n            else {\n                name = owner.first_name + ' ' + owner.last_name\n                photo = owner.photo_50\n            }\n\n            const views_count = content.views === undefined ? null : content.views.count\n\n            var text_style = {}\n            var show_check = true\n\n            if (content.text.length > 250) {\n                show_check = this.state.show_all_posts.includes(post_custom_id) ? false : true\n                text_style = show_check ? { height: '150px', overflow: 'hidden' } : {}\n            }\n\n\n            return (\n                <Fragment>\n                    <div className=\"post\">\n                        <div className=\"post-header\">\n                            <img src={photo}></img>\n                            <p className=\"name\"><a target=\"_blank\" rel=\"noopener noreferrer\" href={link}>{name}</a></p>\n                        </div>\n                        <div className=\"post-body\">\n                            <div className=\"text\" style={text_style}>\n                                <ReactLinkify>{content.text}</ReactLinkify>\n                            </div>\n                            {show_check ? <p id=\"show-all\" onClick={() => { this.showAll(post_custom_id) }}>Показать полностью...</p> : null}\n                            <div className=\"attachments\">\n                                {this.renderAttachments(content.attachments)}\n                            </div>\n                        </div>\n                        <div className=\"post-footer\">\n                            <p className=\"likes\"><i class=\"fas fa-heart\"></i> {content.likes.count}</p>\n                            <p className=\"reposts\"><i class=\"fas fa-retweet\"></i> {content.reposts.count}</p>\n                            <p className=\"comments\"><i class=\"fas fa-comment-alt\"></i> {content.comments.count}</p>\n                            <p className=\"views\"><i class=\"fas fa-eye\"></i> {views_count}</p>\n                        </div>\n                    </div>\n                </Fragment>\n            )\n        })\n    }\n\n    showAll = (id) => {\n        this.setState({ show_all_posts: [...this.state.show_all_posts, id] })\n    }\n\n    renderAttachments = (data) => {\n        if (data != undefined) {\n            return data.map(item => {\n                if (item.type == 'doc') {\n                    return (\n                        <Fragment>\n                            <div className=\"doc\">\n                                <a href={item.doc.url}><img src={item.doc.url}></img></a>\n                            </div>\n                        </Fragment>\n                    )\n                }\n                if (item.type == 'photo') {\n                    return (\n                        <Fragment>\n                            <div className=\"photo\">\n                                <img src={item.photo.sizes[4].url}></img>\n                            </div>\n                        </Fragment>\n                    )\n                }\n                return null\n            })\n\n        }\n        return null\n    }\n\n\n    render() {\n        return (\n            <Fragment>\n                {/* <div className=\"background\" style={{ backgroundImage: 'url(\"' + Background + '\")' }}></div> */}\n                <div className=\"add-new-post\">\n                    <input id=\"post_input\" name=\"post_link\" onChange={this.onChange} placeholder=\"Введите ссылку на запись\"></input>\n                    <button id=\"submit_post\" onClick={this.submitPostByLink}>Загрузить запись</button>\n                </div>\n                <div className=\"post-container\">\n                    {this.renderPosts()}\n\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    getWall,\n    checkToken\n};\n\nconst mapStateToProps = state => ({\n    new_post: state.walls.selected,\n    token: state.login.token\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MainParser);\n","import React, { Component } from 'react'\nimport { Fragment } from 'react'\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n\nimport { setCode, getToken } from '../../actions/auth/login';\nimport { getUser } from '../../actions/walls';\nimport { Link } from 'react-router-dom';\nimport onClickOutside from \"react-onclickoutside\";\n\n\n\nexport class UserMenu extends Component {\n\n    state = {\n        user_settings_visibility: false,\n        user: {}\n    }\n\n    componentDidMount() {\n    }\n\n\n    // componentDidUpdate(prevProps) {\n    //     if (prevProps != this.props && Object.keys(this.props.user).length && this.props.token.user_id == this.props.user.response[0].id) {\n    //         this.setState({ user: this.props.user })\n    //     }\n    //     if (this.props.token != prevProps.token) {\n    //         this.props.getUser(this.props.token.access_token, this.props.token.user_id)\n    //     }\n    // }\n\n    handleClickOutside = evt => {\n        this.closeUserSettings()\n    };\n\n    static propTypes = {\n        setCode: PropTypes.func.isRequired,\n        getToken: PropTypes.func.isRequired,\n        getUser: PropTypes.func.isRequired,\n        token: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        account_info: PropTypes.object.isRequired\n    }\n\n    toggleUserSettings = () => {\n        this.setState({ user_settings_visibility: !this.state.user_settings_visibility })\n    }\n\n    closeUserSettings = () => {\n        this.setState({ user_settings_visibility: false })\n    }\n\n\n    render() {\n        const user = this.props.account_info\n\n        return (\n            <Fragment>\n                <div>\n                    {Object.keys(user).length ?\n                        <div className=\"user-menu\">\n                            <img className=\"user-photo\" onClick={this.toggleUserSettings} src={user.photo_200}></img>\n                        </div>\n                        : null\n                    }\n                    {this.state.user_settings_visibility ?\n                        <div className=\"user-settings\">\n                            <Link to={`/account`}><button>Личный кабинет</button></Link>\n                            <button>Выйти</button>\n                        </div> : null\n                    }\n                </div>\n            </Fragment>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    setCode,\n    getToken,\n    getUser\n};\n\nconst mapStateToProps = state => ({\n    code: state.login.code,\n    token: state.login.token,\n    account_info: state.login.account_info\n})\n\nUserMenu = onClickOutside(UserMenu);\nUserMenu = connect(mapStateToProps, mapDispatchToProps)(UserMenu);\n\nexport default UserMenu;\n","import React, { Component, Fragment } from 'react'\n\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\n\n\nimport { checkToken } from '../../actions/auth/login';\nimport { getUser } from '../../actions/walls';\nimport user from '../../reducers/auth/login';\n\nimport Background from '../../static/background.jpg';\n\n\nexport class UserPage extends Component {\n\n    static propTypes = {\n        checkToken: PropTypes.func.isRequired,\n        getUser: PropTypes.func.isRequired,\n        token: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        account_info: PropTypes.object.isRequired\n    }\n\n    state = {\n        user: {}\n    }\n\n\n    componentDidMount() {\n        this.props.checkToken()\n    }\n\n    renderHead = () => {\n        const user = this.props.account_info\n        return (\n            <div className=\"user-info\">\n                <img src={user.photo_200}></img>\n                <p className=\"user-info_name\">{user.first_name} {user.last_name}</p>\n            </div>\n        )\n    }\n\n\n    renderContent = () => {\n        return null\n    }\n\n    render() {\n        const user = this.props.account_info\n        return (\n            <Fragment>\n                {Object.keys(user).length ?\n                    <Fragment>\n                        <div className=\"background\" style={{ backgroundImage: 'url(\"' + Background + '\")' }}></div>\n                        <div className=\"user-body\">\n                            <div className=\"user-navigation\">\n                                {this.renderHead()}\n                                <div className=\"user-choices\">\n                                    <button><i class=\"fas fa-balance-scale-right\"></i>  Права доступа</button>\n                                    <button><i class=\"fas fa-cog\"></i>  Настройки</button>\n                                    <button><i class=\"fas fa-upload\"></i>  Текущие запросы</button>\n                                    <button><i class=\"fas fa-user-tie\"></i>  Сменить аккаунт</button>\n                                    <button><i class=\"fas fa-question-circle\"></i>  Что-нибудь еще..</button>\n                                </div>\n                            </div>\n                            <div className=\"user-content\">\n                                {this.renderContent()}\n                            </div>\n                        </div>\n\n                    </Fragment>\n                    : null}\n            </Fragment>\n        )\n    }\n}\n\nconst mapDispatchToProps = {\n    checkToken,\n};\n\nconst mapStateToProps = state => ({\n    token: state.login.token,\n    account_info: state.login.account_info\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserPage);\n","import './static/css/all.css';\nimport './static/css/wall.css';\nimport './static/css/tiles.css';\nimport './static/css/panels.css';\nimport './static/css/fixer.css';\nimport './static/css/user.css';\nimport './static/css/header.css';\nimport './static/css/home.css';\nimport Search from './components/header/Search';\nimport LeftPanelBody from './components/panel/LeftPanelBody';\nimport Tiles from './components/display/Tiles';\n\nimport { Transition } from 'react-transition-group'\n\nimport React, { Component, Fragment } from 'react';\nimport ReactDOM from 'react-dom';\nimport KeyboardEventHandler from 'react-keyboard-event-handler';\nimport ClusterPanelBody from './components/panel/ClusterPanelBody';\nimport Slide from './components/display/Slide';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport Workspace from './components/Workspace';\nimport Home from './components/Home';\nimport ServiceList from './components/ServiceList';\n\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport MainParser from './components/Parser/MainParser';\nimport UserMenu from './components/auth/UserMenu';\nimport UserPage from './components/auth/UserPage';\n\n\nclass App extends Component {\n\n\n  render() {\n    return (\n      <Provider store={store}>\n        <Router>\n          <UserMenu />\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/service-list\" component={ServiceList} />\n            <Route exact path=\"/workspace\" component={Workspace} />\n            <Route exact path=\"/parser\" component={MainParser} />\n            <Route exact path=\"/account\" component={UserPage} />\n          </Switch>\n        </Router>\n      </Provider>\n\n    )\n  }\n}\n\nexport default App\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/background.00b1933e.jpg\";"],"sourceRoot":""}